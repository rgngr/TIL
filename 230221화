# Day1 - 23.02.21.화

- 객체지향 프로그래밍 OOP에 대해서 설명해주세요. (원칙 or 키워드)
    - 제품을 만들 때 부품을 먼저 만들고 부품들을 조립해서 하나의 제품을 완성한다.
    - 이처럼 소프트웨어 개발에서도 부품에 해당하는 객체를 먼저 만들고 객체를 하나씩 조립해서 완성된 프로그램을 만드는 기법을 객체지향 프로그래밍이라고 한다.
    - 4가지 특징
        - 추상화 : 말 그대로 추상
        - 캡슐화 : 필드와 메소드를 하나로 묶는 것 + 객체의 세부 내용이 외부에 드러나지 않아 외부에서 데이터에 직접 접근하는 것을 방지
        - 상속 : 자식클래스가 부모클래스의 특징과 기능을 물려받는 것, 상속 받아 수정하여 사용하기 때문에 중복코드를 줄일 수 있다. 부모클래스의 수정으로 모든 자식클래스들도 수정되는 효과
        - 다형성 : 어떤 변수, 메소드가 상황에 따라 다른 겨로가를 내는 것, 오버라이딩(부모클래스 메소드를 자식클래스에서 재정의), 오버로딩(한 클래스에서 메소드 이름은 같지만 파라미터 개수나 자료형을 다르게 하여 서로 다르게 동작하게 하는 것)
    - 절차지향 언어보다 실행속도가 느리다.
    - 설계원칙
        - SRP (단일 책임 원칙) : 한 클래스는 하나의 책임만 가져야 한다. 예를 들면, 결제 클래스는 오직 결제 기능만 책임
        - OCP (개방-폐쇄 원칙) : 확장에는 열려있고, 수정에는 닫혀 있어야 한다. 기존의 코드를 변경하지 않으면서 기능을 추가할 수 있도록 설계가 되는 원칙, 추상화와 다형성
        - LSP (리스코프 치환 원칙) : 상위 타입은 항상 하위 타입으로 대체할 수 있어야 한다. 부모 클래스가 들어갈 자리에 자식 클래스를 넣어도 역할을 하는 데 문제가 없어야 한다는 의미
        - ISP (인터페이스 분리 원칙) : 인터페이스 내에 메소드는 최소한 일수록 좋다. 하나의 일반적인 인터페이스보다 여러 개의 구체적인 인터페이스가 낫다.
        - DIP (의존관계 역전 원칙) : 구체적인 것이 추상화된 것에 의존해야 한다. 자주 변겨오디는 구체 클래스에 의존하지 말라.

- REST API란 무엇인가요? 사용하는 이유? 다른 비교할만한 것은?
    - REpresentational State Transfer
    - REST 특징
        - Server-Client 구조
        - Stateless (무상태) : Client의 context를 Server에 저장하지 않는다. 즉 세션과 쿠키같은 context 정보를 신경쓰지 않아도 되므로 구현이 단순해짐, Server는 각각의 요청을 완전히 별개의 것으로 인식하고 처리
        - Cacheable (캐시 처리 기능) : 캐싱 기능 적용 가능, 대량의 요청을 효율적으로 처리 가능
        - Layered System (계층 구조) : 다중 계층으로 구성될 수 있다. 보안, 로드 밸런싱, 암호화 등을 위한 계층을 추가하여 구조를 변경할 수 있다. Proxy, Gateway와 같은 네트워크 기반의 중간매체를 사용할 수 있다.
        - Uniform Interface (인터페이스 일관성) : 특정 언어나 기술에 종속되지 않음
        - Self-Descriptiveness (자체 표현) : 요청 메시지만 보고도 쉽게 이해할 수 있는 자체 표현 구조로 되어있다.
    - REST API?
        - REST의 특징을 기반으로 서비스 API를 구현한 것
        - 각 요청이 어떤 동작이나 정보를 위한 것인지를 그 요청의 모습 자체로 추론이 가능
        - URI는 정보의 자원을 표현해야 한다.
        - 자원에 대한 행위는 HTTP Methodfh 표현 한다. Method는 URI에 포함하지 않는다.
    - REST API 설계 규칙
        - URI는 명사를 사용
        - /로 계층 관계 표현, 마지막에는 /를 사용하지 않음
        - _은 사용하지 않고 -를 사용
        - 소문자로만 구성
        - HTTP 응답 상태 코드 사용
    - 다른 비교할만한 것 : GraphQL
        - REST API로 사용할 수 없는 기능을 제공하기 위해 대부분의 오픈소스 GraphQL 확장 기능을 사용할 수 있습니다.
        - REST API는 Resource 종류별로 요청을 해야하고, 이로인해 요청 횟수가 필요한 Resource의 종류에 비례합니다. 반면에 GraphQL은 원하는 정보를 하나의 Query에 모두 담아 요청하는 것이 가능하기에 HTTP 응답의 Size를 줄일 수 있습니다.
        - REST API에서의 한계인 Over-Fetching과 Under-Fetching을 개선해줍니다.
    - 다른 비교할만한 것 : SOAP API